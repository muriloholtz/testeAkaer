# -*- coding: utf-8 -*-
"""teste_Akaer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eMkptscEJwx8wfm55zZ-xhr9t-ih-W6J

## exercício 1
"""

n = int(input())
nv = [0]*(n+1)

ent = str(input())
ent = ent.replace(" ", "")

for i in ent:
    nv[int(i)] = int(i)

for i in range(1, len(nv)):
    if nv[i] == 0:
        print(i)

"""## exercício 2"""

N = int(input())

while N>0:
    cont = 0

    # D, E: arrays para controle de paridades 
    D = [False]*61
    E = [False]*61

    while N:
        N = N - 1 # para index
        ML = str(input())
        ML = ML.replace(" ", "")
        M = int(ML[0]+ML[1])
        L = ML[2]

        if L == 'E':
            E[M] = True

        else:
            D[M] = True

        if E[M] and D[M]:
            cont+=1
            E[M], D[M] = False, False

    print(cont)
    N = int(input())

"""## exercício 3"""

# funcao de ordenaçao quicksort
# criada por mim na disciplina de estrutura de dados 2 (em 2020)

def quicksort(lista, inicio = 0, fim = None):
	if (fim == None):
		fim = len(lista)-1
	if (inicio < fim):
		p = partition(lista, inicio, fim)
		quicksort(lista, inicio, p-1)
		quicksort(lista, p+1, fim)

def partition(lista, inicio, fim):
	pivot = lista[fim]
	i = inicio
	for j in range(inicio, fim):
		if (lista[j] <= pivot):
			lista[j], lista[i] = lista[i], lista[j]
			i = i + 1
	lista[i], lista[fim] = lista[fim], lista[i]
	return i

t = int(input())
tv = [0]*t

for cont in range(t):
    values = input()
    n, c, p = (int(num) for num in values.split(' '))
    values = input()
    andares = [0]*p

    i = 0
    for num in values.split(' '):
        andares[i] = int(num)
        i += 1

    quicksort(andares) # ordena para valores proximos ficarem lado a lado
    

    aux, res = 0, 0
    while True:
        if c > p:
            res = res + max(andares[aux:])*2
            break
        if c == p:
            res = res + max(andares[aux:c])*2
            break
        else:
            res = res + max(andares[aux:c])*2
            aux = c
            c += c

    print(res)

"""## exercício 4"""

while True:
    val, n = map(str, input().split()) # outra forma de atribuir os valores

    if val == '0' and n == '0':
        break
    
    n = list(n)
    res, lista = [], []
  
    for i in range(len(n)):
        if val != n[i]:
            lista.append(int(n[i]))
      
    aux = 0
    
    for i in lista:
        if aux == 0:
            if i != 0:
                res.append(i)
                aux+=1
        else:
            res.append(i)
            aux+=1
      

    if sum(lista)==0:
        print('0')
    else:  
        for i in res:
            print(i, end=" ".strip())
        print()